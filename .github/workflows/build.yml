name: Build

on:
  push:
  pull_request:

jobs:
  get-current-workflow:
    # here we try to extract workflow path of the current workflow
    # thing is that only info that we have within this context
    # is workflow name if available, or the workflow relative path
    # if no name is provided
    # unlike workflow_run context this has to run like this
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Get workflow file
      id: workflow-file
      run: |
        [[ "${{ startsWith(github.workflow, './github/workflows/') }}" == "true" ]] &&
          echo "::set-output name=workflow::${{ github.workflow }}" && exit 0
        
        WORKFLOW_FILE=$(grep -o '^name: ${{ github.workflow }}' .github/workflows/* | cut -d: -f1)
        [[ $(wc -w <<< $WORKFLOW_FILE) == 0 ]] &&
          echo "::error::workflow not found" && exit 1

        [[ $(wc -w <<< $WORKFLOW_FILE) > 1 ]] &&
          echo "::error::multiple workloads found" && echo "::warning::$WORKFLOW_FILE" && exit 1
          
        echo "$WORKFLOW_FILE"
        echo "::set-output name=workflow::$WORKFLOW_FILE"
    outputs:
      workflow: ${{ steps.workflow-file.outputs.workflow }}

  generate-job-matrix:
    needs: get-current-workflow
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: generate matrix
      id: job-matrix
      run: |
        JOBS=$(
          yq e -j ${{ needs.get-current-workflow.outputs.workflow }} | 
          jq '
            .jobs | 
            to_entries[] | 
            if 
              (.value."runs-on" | contains("github.run_id")) 
            then 
              "${{ github.run_id }}-\(.key)"
            else 
              empty 
            end' | 
          jq --slurp -c
        )
        echo $JOBS
        echo "::set-output name=jobs::$JOBS"

    outputs:
      jobs: ${{ steps.job-matrix.outputs.jobs }}

  wait-for-runners:
    needs: generate-job-matrix
    runs-on: ubuntu-latest
    strategy:
      matrix:
        job: ${{ fromJson(needs.generate-job-matrix.outputs.jobs) }}

    steps:
    - name: wait for runner labels to become availible
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.RUNNER_ACCESS_TOKEN }}
        script: |
          const sleep = m => new Promise(r => setTimeout(r, m));

          // get runner ID with a retry 
          const getRunner = async iter => {
            let runnersObj = await github.request('GET /repos/{owner}/{repo}/actions/runners', {
              owner: '${{ github.repository_owner }}',
              repo: '${{ github.event.repository.name }}'
            });
            runner = runnersObj.data.runners.find(obj => { return obj.name === "${{ matrix.job }}" });
            if (runner) {
              return 0;
            } else {
              await sleep(20000)
              if (--iter) {
                return await getRunner(iter);
              } else {
                return 1;
              }
            };
          }

          await getRunner(15);

  run-on-demand-1:
    needs: wait-for-runners
    runs-on: "${{ github.run_id }}-run-on-demand"

    steps:
    - name: Run on on-demand runner
      run: |
        hostname
        echo "this is on-demand runner #1"

  run-on-demand-2:
    needs: wait-for-runners
    runs-on: "${{ github.run_id }}-run-on-demand"

    steps:
    - name: Run on on-demand runner
      run: |
        hostname
        echo "this is on-demand runner #2"